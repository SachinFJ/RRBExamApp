// src/screens/OneLinerScreen.tsx
import React, { useState, useEffect, useCallback } from 'react'; // useCallback ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
import { View, Text, TouchableOpacity, StyleSheet, Alert, ScrollView } from 'react-native'; // ScrollView ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ
import AsyncStorage from '@react-native-async-storage/async-storage';
import { oneLinerQuestions, OneLinerQuestion } from '../data/oneLinerData'; // ‡§™‡§æ‡§• ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
import { useFocusEffect, useNavigation } from '@react-navigation/native'; // useFocusEffect ‡§î‡§∞ useNavigation ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ

const BOOKMARKED_QUESTIONS_KEY = '@BookmarkedQuestionsKey';

// OneLinerQuestion ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§Æ‡•á‡§Ç id ‡§î‡§∞ itemType (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï) ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
interface OneLinerQuestionWithMeta extends OneLinerQuestion {
  itemType?: 'oneliner'; // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è
}

const OneLinerScreen = () => {
  const navigation = useNavigation(); // ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§® ‡§π‡•Å‡§ï
  const [questions, setQuestions] = useState<OneLinerQuestionWithMeta[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isAnswerRevealed, setIsAnswerRevealed] = useState(false);
  const [hasSelfAssessedThisQuestion, setHasSelfAssessedThisQuestion] = useState(false);

  const [revealedCount, setRevealedCount] = useState(0);
  const [userMarkedCorrect, setUserMarkedCorrect] = useState(0);
  const [userMarkedIncorrect, setUserMarkedIncorrect] = useState(0);

  // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡•á‡§ü (‡§Ö‡§¨ OneLinerQuestionWithMeta ‡§ü‡§æ‡§á‡§™ ‡§ï‡§æ ‡§π‡•ã‡§ó‡§æ)
  const [bookmarkedItems, setBookmarkedItems] = useState<OneLinerQuestionWithMeta[]>([]);

  // ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§ï‡•á‡§µ‡§≤ ‡§µ‡§®-‡§≤‡§æ‡§á‡§®‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è)
  const loadBookmarks = useCallback(async () => {
    try {
      const storedBookmarks = await AsyncStorage.getItem(BOOKMARKED_QUESTIONS_KEY);
      if (storedBookmarks) {
        const allBookmarks = JSON.parse(storedBookmarks);
        // ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§®-‡§≤‡§æ‡§á‡§®‡§∞ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§µ‡•á ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç itemType ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à (‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è)
        const oneLinerBookmarks = allBookmarks.filter(
          (item: any) => item.itemType === 'oneliner' || (!item.itemType && item.answer)
        );
        setBookmarkedItems(oneLinerBookmarks);
      } else {
        setBookmarkedItems([]);
      }
    } catch (e) {
      console.error("Failed to load bookmarks for one-liners.", e);
    }
  }, []);

  useFocusEffect(loadBookmarks); // ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§´‡•ã‡§ï‡§∏ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç

  useEffect(() => {
    const shuffledQuestions = [...oneLinerQuestions].sort(() => Math.random() - 0.5);
    // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® OneLinerQuestionWithMeta ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•Ç‡§™ ‡§π‡•ã‡§Ç
    setQuestions(shuffledQuestions.map(q => ({...q})));
    setCurrentQuestionIndex(0);
    setIsAnswerRevealed(false);
    setHasSelfAssessedThisQuestion(false);
    setRevealedCount(0);
    setUserMarkedCorrect(0);
    setUserMarkedIncorrect(0);
  }, []);

  const handleRevealAnswer = () => {
    if (!isAnswerRevealed) {
      setRevealedCount(prevCount => prevCount + 1);
    }
    setIsAnswerRevealed(true);
    setHasSelfAssessedThisQuestion(false); // ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§™‡§∞ ‡§∏‡•ç‡§µ-‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
  };

  const handleSelfAssessment = (thoughtCorrectly: boolean) => {
    if (thoughtCorrectly) {
      setUserMarkedCorrect(prevCount => prevCount + 1);
    } else {
      setUserMarkedIncorrect(prevCount => prevCount + 1);
    }
    setHasSelfAssessedThisQuestion(true);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prevIndex => prevIndex + 1);
      setIsAnswerRevealed(false);
      setHasSelfAssessedThisQuestion(false);
    } else {
      Alert.alert(
        "One-Liners Finished", // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
        `You revealed ${revealedCount} answers.\nCorrectly Guessed: ${userMarkedCorrect}\nIncorrectly Guessed: ${userMarkedIncorrect}`, // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
        [{ text: "OK", onPress: () => navigation.goBack() }] // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
      );
    }
  };

  const toggleBookmark = async () => {
    if (!questions[currentQuestionIndex]) return;

    const currentQ = questions[currentQuestionIndex];
    if (!currentQ.id) {
      console.warn("One-liner is missing an ID. Cannot bookmark.");
      Alert.alert("Error", "This one-liner cannot be bookmarked (ID missing)."); // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
      return;
    }

    // AsyncStorage ‡§∏‡•á ‡§∏‡§≠‡•Ä ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ö‡§®‡•ç‡§Ø ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§π‡•á‡§Ç
    let allStoredBookmarksRaw = await AsyncStorage.getItem(BOOKMARKED_QUESTIONS_KEY);
    let allStoredBookmarks: any[] = allStoredBookmarksRaw ? JSON.parse(allStoredBookmarksRaw) : [];

    // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§µ‡§®-‡§≤‡§æ‡§á‡§®‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§Ü‡§á‡§ü‡§Æ ‡§¨‡§®‡§æ‡§è‡§Ç
    const bookmarkOneLinerItem: OneLinerQuestionWithMeta = { ...currentQ, itemType: 'oneliner' };

    const existingBookmarkIndex = allStoredBookmarks.findIndex(
      (bq) => bq.id === bookmarkOneLinerItem.id && bq.itemType === 'oneliner'
    );

    if (existingBookmarkIndex > -1) {
      allStoredBookmarks.splice(existingBookmarkIndex, 1); // ‡§π‡§ü‡§æ‡§è‡§Ç
    } else {
      allStoredBookmarks.push(bookmarkOneLinerItem); // ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    }

    try {
      await AsyncStorage.setItem(BOOKMARKED_QUESTIONS_KEY, JSON.stringify(allStoredBookmarks));
      // ‡§≤‡•ã‡§ï‡§≤ ‡§∏‡•ç‡§ü‡•á‡§ü (bookmarkedItems) ‡§ï‡•ã ‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø UI ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∞‡§ø‡§´‡•ç‡§≤‡•á‡§ï‡•ç‡§ü ‡§π‡•ã
      // ‡§Ø‡§π ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§®-‡§≤‡§æ‡§á‡§®‡§∞ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§¶‡§ø‡§ñ‡§æ‡§è‡§ó‡§æ ‡§ú‡•ã ‡§á‡§∏ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§π‡•à‡§Ç
      const currentOneLinerBookmarks = allStoredBookmarks.filter(item => item.itemType === 'oneliner');
      setBookmarkedItems(currentOneLinerBookmarks);
    } catch (e) {
      console.error("Failed to update bookmarks for one-liner.", e);
      Alert.alert("Error", "Failed to update bookmarks."); // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
    }
  };


  if (questions.length === 0) {
    return <View style={styles.container}><Text style={styles.loadingText}>Loading one-liners...</Text></View>; // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
  }

  if (currentQuestionIndex >= questions.length && questions.length > 0) {
    return <View style={styles.container}><Text style={styles.loadingText}>All one-liners finished.</Text></View>; // ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
  }

  const currentQuestion = questions[currentQuestionIndex];
  // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç (‡§ï‡•á‡§µ‡§≤ ‡§µ‡§®-‡§≤‡§æ‡§á‡§®‡§∞ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç)
  const isCurrentBookmarked = currentQuestion && currentQuestion.id ? 
    bookmarkedItems.some(bq => bq.id === currentQuestion.id) : false;

  return (
    <ScrollView style={styles.scrollView} contentContainerStyle={styles.container}>
      <View style={styles.statsContainer}>
        <Text style={styles.statsText}>Question: {currentQuestionIndex + 1}/{questions.length}</Text>
        <Text style={styles.statsText}>Revealed: {revealedCount}</Text>
        <Text style={styles.statsText}>Guessed Correct: {userMarkedCorrect}</Text>
        <Text style={styles.statsText}>Guessed Incorrect: {userMarkedIncorrect}</Text>
      </View>

      <View style={styles.questionCard}>
        <View style={styles.questionHeader}>
            <Text style={styles.questionLabel}>Question:</Text>
            {currentQuestion && currentQuestion.id && (
                <TouchableOpacity onPress={toggleBookmark} style={styles.bookmarkButton}>
                    <Text style={[
                        styles.bookmarkIcon, 
                        isCurrentBookmarked ? styles.bookmarkedActiveIcon : styles.bookmarkedInactiveIcon
                    ]}>
                        {isCurrentBookmarked ? 'üîñ' : '‚òÜ'}
                    </Text>
                </TouchableOpacity>
            )}
        </View>
        <Text style={styles.questionText}>{currentQuestion.question}</Text>
      </View>

      {!isAnswerRevealed ? (
        <TouchableOpacity
          style={[styles.actionButton, styles.revealButton]}
          onPress={handleRevealAnswer}
        >
          <Text style={styles.actionButtonText}>Reveal Answer</Text>
        </TouchableOpacity>
      ) : (
        <>
          <View style={styles.answerCard}>
            <Text style={styles.answerLabel}>Answer:</Text>
            <Text style={styles.answerText}>{currentQuestion.answer}</Text>
          </View>

          {!hasSelfAssessedThisQuestion && (
            <View style={styles.selfAssessmentContainer}>
              <Text style={styles.selfAssessmentPrompt}>Did you guess the answer correctly?</Text>
              <View style={styles.assessmentButtonsRow}>
                <TouchableOpacity
                  style={[styles.assessmentButton, styles.assessmentButtonYes]}
                  onPress={() => handleSelfAssessment(true)}
                >
                  <Text style={styles.assessmentButtonText}>Yes, I did! üëç</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.assessmentButton, styles.assessmentButtonNo]}
                  onPress={() => handleSelfAssessment(false)}
                >
                  <Text style={styles.assessmentButtonText}>No, I didn't üëé</Text>
                </TouchableOpacity>
              </View>
            </View>
          )}
        </>
      )}

      <TouchableOpacity
        style={[styles.actionButton, styles.nextButton]}
        onPress={handleNextQuestion}
      >
        <Text style={styles.actionButtonText}>Next One-Liner</Text>
      </TouchableOpacity>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  scrollView: { // ScrollView ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤
    flex: 1,
    backgroundColor: '#f4f8fb', // ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§≤‡§ó ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°
  },
  container: {
    flexGrow: 1,
    padding: 20,
  },
  loadingText: {
    fontSize: 18,
    color: '#4a5568', // ‡§•‡•ã‡§°‡§º‡§æ ‡§ó‡§π‡§∞‡§æ ‡§ó‡•ç‡§∞‡•á
    textAlign: 'center',
    marginTop: 50,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
    marginBottom: 18, // ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    paddingVertical: 12, // ‡§•‡•ã‡§°‡§º‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    paddingHorizontal:15,
    backgroundColor: '#e2e8f0', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§ó‡•ç‡§∞‡•á
    borderRadius: 10, // ‡§ó‡•ã‡§≤ ‡§ï‡•ã‡§®‡•á
    elevation: 1,
  },
  statsText: {
    fontSize: 13,
    color: '#2d3748', // ‡§ó‡§π‡§∞‡§æ ‡§ó‡•ç‡§∞‡•á-‡§®‡•Ä‡§≤‡§æ
    fontWeight: '500',
    marginRight: 8, // ‡§•‡•ã‡§°‡§º‡§æ ‡§ï‡§Æ ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    marginBottom: 5,
  },
  questionCard: {
    backgroundColor: '#ffffff',
    paddingHorizontal: 20,
    paddingVertical: 18, // ‡§•‡•ã‡§°‡§º‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    borderRadius: 12,
    marginBottom: 18,
    elevation: 3, // ‡§•‡•ã‡§°‡§º‡§æ ‡§î‡§∞ ‡§∂‡•à‡§°‡•ã
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
  },
  questionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10, // ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
  },
  questionLabel: {
    fontSize: 14,
    color: '#718096', // ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§ó‡•ç‡§∞‡•á
    fontWeight: '500',
  },
  bookmarkButton: {
    padding: 8, // ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç
    borderRadius: 20, // ‡§ó‡•ã‡§≤ ‡§¨‡§ü‡§® ‡§ú‡•à‡§∏‡§æ ‡§´‡•Ä‡§≤
    // backgroundColor: '#f0f0f0', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§° ‡§Ø‡§¶‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•ã
  },
  bookmarkIcon: {
    fontSize: 28, // ‡§Ü‡§á‡§ï‡§® ‡§ï‡§æ ‡§Ü‡§ï‡§æ‡§∞ ‡§¨‡§¢‡§º‡§æ‡§Ø‡§æ
  },
  bookmarkedActiveIcon: {
    color: '#FFC107', // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§™‡•Ä‡§≤‡§æ (‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•Ä ‡§•‡•Ä‡§Æ ‡§ï‡§æ ‡§∞‡§Ç‡§ó)
  },
  bookmarkedInactiveIcon: {
    color: '#A0AEC0', // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§® ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§ó‡•ç‡§∞‡•á
  },
  questionText: {
    fontSize: 19, // ‡§•‡•ã‡§°‡§º‡§æ ‡§¨‡§°‡§º‡§æ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü
    color: '#1a202c', // ‡§¨‡§π‡•Å‡§§ ‡§ó‡§π‡§∞‡§æ ‡§ó‡•ç‡§∞‡•á (‡§≤‡§ó‡§≠‡§ó ‡§ï‡§æ‡§≤‡§æ)
    lineHeight: 28, // ‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§†‡§®‡•Ä‡§Ø‡§§‡§æ
    fontWeight: '500',
  },
  answerCard: {
    backgroundColor: '#E6FFFA', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§ü‡•Ä‡§≤/‡§∏‡§ø‡§Ø‡§æ‡§® ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°
    padding: 18, // ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    borderRadius: 12,
    marginBottom: 18,
    borderWidth: 1,
    borderColor: '#B2F5EA', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§¨‡•â‡§∞‡•ç‡§°‡§∞
    elevation: 2,
  },
  answerLabel: {
    fontSize: 14,
    color: '#2C5282', // ‡§ó‡§π‡§∞‡§æ ‡§®‡•Ä‡§≤‡§æ
    marginBottom: 6, // ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    fontWeight: '500',
  },
  answerText: {
    fontSize: 18, // ‡§•‡•ã‡§°‡§º‡§æ ‡§¨‡§°‡§º‡§æ ‡§â‡§§‡•ç‡§§‡§∞
    color: '#285E61', // ‡§ó‡§π‡§∞‡§æ ‡§ü‡•Ä‡§≤
    lineHeight: 26,
    fontWeight: '500',
  },
  actionButton: {
    paddingVertical: 14, // ‡§•‡•ã‡§°‡§º‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    paddingHorizontal: 20,
    borderRadius: 10, // ‡§î‡§∞ ‡§ó‡•ã‡§≤ ‡§ï‡•ã‡§®‡•á
    alignItems: 'center',
    marginBottom: 12, // ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.15,
    shadowRadius: 2,
  },
  revealButton: {
    backgroundColor: '#4299E1', // ‡§®‡•Ä‡§≤‡§æ ‡§∞‡§Ç‡§ó
  },
  actionButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  nextButton: {
    backgroundColor: '#48BB78', // ‡§π‡§∞‡§æ ‡§∞‡§Ç‡§ó
    marginTop: 8, // ‡§•‡•ã‡§°‡§º‡§æ ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
  },
  selfAssessmentContainer: {
    marginVertical: 20, // ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    padding: 18, // ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    backgroundColor: '#FFFBEB', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§™‡•Ä‡§≤‡§æ
    borderRadius: 12,
    alignItems: 'center',
    elevation: 2,
  },
  selfAssessmentPrompt: {
    fontSize: 17, // ‡§•‡•ã‡§°‡§º‡§æ ‡§¨‡§°‡§º‡§æ
    color: '#975A16', // ‡§ó‡§π‡§∞‡§æ ‡§™‡•Ä‡§≤‡§æ/‡§¨‡•ç‡§∞‡§æ‡§â‡§®
    marginBottom: 15, // ‡§Ö‡§ß‡§ø‡§ï ‡§Æ‡§æ‡§∞‡•ç‡§ú‡§ø‡§®
    fontWeight: '500',
    textAlign: 'center',
  },
  assessmentButtonsRow: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    width: '100%',
  },
  assessmentButton: {
    paddingVertical: 12, // ‡§Ö‡§ß‡§ø‡§ï ‡§™‡•à‡§°‡§ø‡§Ç‡§ó
    paddingHorizontal: 15,
    borderRadius: 10,
    flex: 0.48, // ‡§•‡•ã‡§°‡§º‡§æ ‡§∏‡•ç‡§™‡•á‡§∏‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∏‡§æ‡§•
    alignItems: 'center',
    elevation: 1,
  },
  assessmentButtonYes: {
    backgroundColor: '#38A169', // ‡§ó‡§π‡§∞‡§æ ‡§π‡§∞‡§æ
  },
  assessmentButtonNo: {
    backgroundColor: '#E53E3E', // ‡§ó‡§π‡§∞‡§æ ‡§≤‡§æ‡§≤
  },
  assessmentButtonText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: 'bold',
  },
});

export default OneLinerScreen;
