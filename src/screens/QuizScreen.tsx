// src/screens/QuizScreen.tsx
import React, { useState, useEffect, useRef } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage'; // AsyncStorage ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
import { quizQuestions, QuizQuestion } from '../data/quizData'; // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§™‡§æ‡§• ‡§∏‡§π‡•Ä ‡§π‡•ã ‡§î‡§∞ QuizQuestion ‡§Æ‡•á‡§Ç id ‡§π‡•ã

// AsyncStorage Keys (HomeScreen ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§ø‡§Ç‡§ï ‡§Æ‡•á‡§Ç)
const USER_HIGH_SCORE_KEY = '@UserHighScoreKey';
const USER_LAST_SCORE_KEY = '@UserLastScoreKey';
const BOOKMARKED_QUESTIONS_KEY = '@BookmarkedQuestionsKey';

// QuizQuestion ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§Æ‡•á‡§Ç id ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
// ‡§Æ‡§æ‡§® ‡§≤‡•á‡§Ç ‡§ï‡§ø QuizQuestion ‡§á‡§Ç‡§ü‡§∞‡§´‡§º‡•á‡§∏ ‡§ê‡§∏‡§æ ‡§π‡•à:
// export interface QuizQuestion {
//   id: string; // ‡§Ø‡§æ number - ‡§Ø‡§π ‡§Ø‡•Ç‡§®‡§ø‡§ï ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
//   question: string;
//   options: string[];
//   correctAnswerIndex: number;
//   examName?: string;
// }


const QuizScreen = ({ navigation }) => {
  const [questions, setQuestions] = useState<QuizQuestion[]>([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [selectedOptionIndex, setSelectedOptionIndex] = useState<number | null>(null);
  const [score, setScore] = useState(0);
  const [isAnswerProcessed, setIsAnswerProcessed] = useState(false);
  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);
  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);
  const [wrongAnswersCount, setWrongAnswersCount] = useState(0);
  const [skippedCount, setSkippedCount] = useState(0);
  const [feedbackEmoji, setFeedbackEmoji] = useState<string | null>(null);
  const [elapsedTime, setElapsedTime] = useState(0);
  const timerRef = useRef<NodeJS.Timeout | null>(null);

  // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡•á‡§ü
  const [bookmarkedQuestions, setBookmarkedQuestions] = useState<QuizQuestion[]>([]);

  // ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
  useEffect(() => {
    const loadBookmarks = async () => {
      try {
        const storedBookmarks = await AsyncStorage.getItem(BOOKMARKED_QUESTIONS_KEY);
        if (storedBookmarks) {
          setBookmarkedQuestions(JSON.parse(storedBookmarks));
        }
      } catch (e) {
        console.error("Failed to load bookmarks.", e);
      }
    };
    loadBookmarks();
  }, []);

  // ‡§ü‡§æ‡§á‡§Æ‡§∞ ‡§ï‡•ã ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è useEffect
  useEffect(() => {
    let isActive = questions.length > 0 && currentQuestionIndex < questions.length && currentQuestionIndex < questions.length;

    if (isActive) {
      timerRef.current = setInterval(() => {
        setElapsedTime((prevTime) => prevTime + 1);
      }, 1000);
    } else {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    }
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [questions.length, currentQuestionIndex]);

  // ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§î‡§∞ ‡§∂‡§´‡§≤ ‡§ï‡§∞‡•á‡§Ç
  useEffect(() => {
    const shuffledQuestions = [...quizQuestions].sort(() => Math.random() - 0.5);
    setQuestions(shuffledQuestions.slice(0, 10)); // ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è 10 ‡§™‡•ç‡§∞‡§∂‡•ç‡§®, ‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è .slice ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç
    setCurrentQuestionIndex(0);
    setSelectedOptionIndex(null);
    setScore(0);
    setIsAnswerProcessed(false);
    setIsCorrect(null);
    setCorrectAnswersCount(0);
    setWrongAnswersCount(0);
    setSkippedCount(0);
    setFeedbackEmoji(null);
    setElapsedTime(0);
  }, []);


  const handleOptionSelect = (index: number) => {
    if (isAnswerProcessed) return;

    setSelectedOptionIndex(index);
    const currentQuestion = questions[currentQuestionIndex];
    const correct = currentQuestion.correctAnswerIndex === index;

    setIsCorrect(correct);
    if (correct) {
      setScore((prevScore) => prevScore + 1);
      setCorrectAnswersCount((prevCount) => prevCount + 1);
      setFeedbackEmoji('üòÑ');
    } else {
      setWrongAnswersCount((prevCount) => prevCount + 1);
      setFeedbackEmoji('üòü');
    }
    setIsAnswerProcessed(true);
  };

  const moveToNextQuestionLogic = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex((prevIndex) => prevIndex + 1);
      setSelectedOptionIndex(null);
      setIsAnswerProcessed(false);
      setIsCorrect(null);
      setFeedbackEmoji(null);
    } else {
      finalizeQuiz("‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§!");
    }
  };

  const handleNextQuestion = () => {
    if (!isAnswerProcessed && questions.length > 0) { // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à‡§Ç
      setSkippedCount((prevCount) => prevCount + 1);
    }
    moveToNextQuestionLogic();
  };

  const finalizeQuiz = async (title: string) => {
    if (timerRef.current) clearInterval(timerRef.current);

    const finalScoreString = `${score}/${questions.length}`;

    try {
      // ‡§™‡§ø‡§õ‡§≤‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
      await AsyncStorage.setItem(USER_LAST_SCORE_KEY, finalScoreString);

      // ‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
      const storedHighScore = await AsyncStorage.getItem(USER_HIGH_SCORE_KEY);
      if (storedHighScore) {
        const [storedScoreNumStr] = storedHighScore.split('/');
        const storedScoreNum = parseInt(storedScoreNumStr, 10);
        if (score > storedScoreNum) {
          await AsyncStorage.setItem(USER_HIGH_SCORE_KEY, finalScoreString);
        }
      } else {
        // ‡§ï‡•ã‡§à ‡§â‡§ö‡•ç‡§ö‡§§‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§á‡§∏‡•á ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
        await AsyncStorage.setItem(USER_HIGH_SCORE_KEY, finalScoreString);
      }
    } catch (e) {
      console.error("Failed to save scores.", e);
    }
    
    // setCurrentQuestionIndex ‡§ï‡•ã questions.length ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à" ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§¶‡§ø‡§ñ‡•á
    // Alert ‡§¶‡§ø‡§ñ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§§‡§æ‡§ï‡§ø ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§µ‡§ø‡§ú UI ‡§® ‡§¶‡§ø‡§ñ‡•á
    setCurrentQuestionIndex(questions.length);


    Alert.alert(
      title,
      `‡§≤‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§ï‡•Å‡§≤ ‡§∏‡§Æ‡§Ø: ${formatTime(elapsedTime)}\n‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§π‡•à: ${finalScoreString}\n‡§∏‡§π‡•Ä: ${correctAnswersCount}, ‡§ó‡§≤‡§§: ${wrongAnswersCount}, ‡§∏‡•ç‡§ï‡§ø‡§™: ${skippedCount}`,
      [{ text: "‡§†‡•Ä‡§ï ‡§π‡•à", onPress: () => navigation.goBack() }]
    );
  };

  const toggleBookmark = async () => {
    if (!questions[currentQuestionIndex]) return; // ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§® ‡§ï‡§∞‡•á‡§Ç

    const currentQ = questions[currentQuestionIndex];
    // ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§Æ‡•á‡§Ç ‡§Ø‡•Ç‡§®‡§ø‡§ï 'id' ‡§™‡•ç‡§∞‡•â‡§™‡§∞‡•ç‡§ü‡•Ä ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è
    if (!currentQ.id) {
        console.warn("Question is missing an ID. Cannot bookmark.");
        Alert.alert("‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", "‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•ã ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ (ID ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à)‡•§");
        return;
    }

    let updatedBookmarks = [...bookmarkedQuestions];
    const existingBookmarkIndex = updatedBookmarks.findIndex(bq => bq.id === currentQ.id);

    if (existingBookmarkIndex > -1) {
      // ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§π‡•à, ‡§§‡•ã ‡§π‡§ü‡§æ‡§è‡§Ç
      updatedBookmarks.splice(existingBookmarkIndex, 1);
    } else {
      // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
      updatedBookmarks.push(currentQ);
    }

    try {
      await AsyncStorage.setItem(BOOKMARKED_QUESTIONS_KEY, JSON.stringify(updatedBookmarks));
      setBookmarkedQuestions(updatedBookmarks); // ‡§≤‡•ã‡§ï‡§≤ ‡§∏‡•ç‡§ü‡•á‡§ü ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    } catch (e) {
      console.error("Failed to update bookmarks.", e);
      Alert.alert("‡§§‡•ç‡§∞‡•Å‡§ü‡§ø", "‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤‡•§");
    }
  };

  if (questions.length === 0 && currentQuestionIndex >= questions.length) {
    // ‡§Ø‡§π ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§§‡§¨ ‡§π‡•à ‡§ú‡§¨ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§è ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à
    return (
        <View style={styles.container}>
            <Text style={styles.loadingText}>
                {questions.length === 0 && currentQuestionIndex === 0 ? "‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..." : "‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à‡•§"}
            </Text>
        </View>
    );
  }


  // ‡§Ø‡§¶‡§ø currentQuestionIndex ‡§∏‡•Ä‡§Æ‡§æ ‡§∏‡•á ‡§¨‡§æ‡§π‡§∞ ‡§π‡•à (‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§Ø‡§æ ‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø)
  if (currentQuestionIndex >= questions.length && questions.length > 0) {
    return <View style={styles.container}><Text style={styles.loadingText}>‡§ï‡•ç‡§µ‡§ø‡§ú‡§º ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à‡•§</Text></View>;
  }
  if (questions.length === 0 ) {
     return <View style={styles.container}><Text style={styles.loadingText}>‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</Text></View>;
  }


  const currentQuestion = questions[currentQuestionIndex];
  // ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç
  const isCurrentBookmarked = currentQuestion && currentQuestion.id ? bookmarkedQuestions.some(bq => bq.id === currentQuestion.id) : false;


  return (
    <View style={styles.container}>
      <View style={styles.headerContainer}>
        <View style={styles.dashboard}>
          <Text style={styles.dashboardText}>‡§∏‡•ç‡§ï‡•ã‡§∞: {score}</Text>
          <Text style={styles.dashboardText}>‡§∏‡§π‡•Ä: {correctAnswersCount}</Text>
          <Text style={styles.dashboardText}>‡§ó‡§≤‡§§: {wrongAnswersCount}</Text>
          <Text style={styles.dashboardText}>‡§∏‡•ç‡§ï‡§ø‡§™: {skippedCount}</Text>
        </View>
        <View style={styles.timerContainer}>
          <Text style={styles.timerText}>‡§∏‡§Æ‡§Ø: {formatTime(elapsedTime)}</Text>
        </View>
      </View>

      {isAnswerProcessed && feedbackEmoji && (
        <View style={styles.mainEmojiContainer}>
          <Text style={styles.mainEmojiText}>{feedbackEmoji}</Text>
        </View>
      )}

      <View style={styles.questionCard}>
        <View style={styles.questionHeader}>
            <Text style={styles.questionNumberText}>
                ‡§™‡•ç‡§∞‡§∂‡•ç‡§® {currentQuestionIndex + 1} / {questions.length}
            </Text>
            <TouchableOpacity onPress={toggleBookmark} style={styles.bookmarkButton}>
                <Text style={styles.bookmarkIcon}>{isCurrentBookmarked ? 'üîñ' : ' L '}</Text> 
                {/* ' L ' ‡§è‡§ï ‡§ñ‡§æ‡§≤‡•Ä ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§ú‡•à‡§∏‡§æ ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ, ‡§Ü‡§™ ‡§Ö‡§∏‡§≤‡•Ä ‡§Ü‡§á‡§ï‡•â‡§® ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç */}
            </TouchableOpacity>
        </View>
        <Text style={styles.questionText}>{currentQuestion.question}</Text>

        {currentQuestion.examName && (
          <Text style={styles.examNameText}>
            ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠: {currentQuestion.examName}
          </Text>
        )}
      </View>

      <View style={styles.optionsContainer}>
        {currentQuestion.options.map((option, index) => {
          let optionStyle = styles.optionButton;
          let optionTextStyle = styles.optionText;
          let detailEmoji = '';

          if (isAnswerProcessed) {
            if (index === currentQuestion.correctAnswerIndex) {
              optionStyle = [styles.optionButton, styles.correctOptionButton];
              optionTextStyle = [styles.optionText, styles.correctOptionText];
              detailEmoji = '‚úÖ ';
            } else if (index === selectedOptionIndex && !isCorrect) {
              optionStyle = [styles.optionButton, styles.incorrectOptionButton];
              optionTextStyle = [styles.optionText, styles.incorrectOptionText];
              detailEmoji = '‚ùå ';
            } else {
              optionStyle = [styles.optionButton, styles.disabledOptionButton];
            }
          } else {
            if (selectedOptionIndex === index) {
              optionStyle = [styles.optionButton, styles.selectedOptionButton];
            }
          }

          return (
            <TouchableOpacity
              key={index}
              style={optionStyle}
              onPress={() => handleOptionSelect(index)}
              disabled={isAnswerProcessed}
            >
              <Text style={optionTextStyle}>{detailEmoji}{option}</Text>
            </TouchableOpacity>
          );
        })}
      </View>

      <TouchableOpacity
        style={[styles.actionButton, styles.nextButtonOnly, isAnswerProcessed ? {} : styles.disabledNextButton]}
        onPress={handleNextQuestion}
        // disabled={!isAnswerProcessed && selectedOptionIndex === null} // ‡§Ö‡§ó‡§≤‡§æ ‡§¨‡§ü‡§® ‡§§‡§¨ ‡§§‡§ï ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§∞‡§ñ‡•á‡§Ç ‡§ú‡§¨ ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ë‡§™‡•ç‡§∂‡§® ‡§® ‡§ö‡•Å‡§®‡§æ ‡§ú‡§æ‡§è ‡§Ø‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§® ‡§π‡•ã
      >
        <Text style={styles.actionButtonText}>‡§Ö‡§ó‡§≤‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®</Text>
      </TouchableOpacity>
    </View>
  );
};

const formatTime = (seconds: number) => {
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${mins < 10 ? '0' : ''}${mins}:${secs < 10 ? '0' : ''}${secs}`;
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f0f8ff',
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  dashboard: {
    flexDirection: 'row',
    justifyContent: 'space-around', // ‡§∏‡•ç‡§™‡•á‡§∏ ‡§¨‡•á‡§π‡§§‡§∞ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
    backgroundColor: '#e9ecef',
    borderRadius: 8,
    paddingVertical: 8,
    paddingHorizontal: 10,
    flex: 1,
    marginRight: 10,
  },
  dashboardText: {
    fontSize: 12, // ‡§•‡•ã‡§°‡§º‡§æ ‡§õ‡•ã‡§ü‡§æ ‡§ï‡§ø‡§Ø‡§æ
    fontWeight: '600',
    color: '#495057',
  },
  timerContainer: {
    backgroundColor: '#ffc107',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    minWidth: 80, // ‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ ‡§ö‡•å‡§°‡§º‡§æ‡§à
    alignItems: 'center',
  },
  timerText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#212529',
  },
  mainEmojiContainer: {
    alignItems: 'center',
    marginVertical: 10,
  },
  mainEmojiText: {
    fontSize: 48,
  },
  loadingText: {
    fontSize: 18,
    textAlign: 'center',
    marginTop: 50,
    color: '#333',
  },
  questionCard: {
    marginBottom: 15,
    padding: 15,
    backgroundColor: '#ffffff',
    borderRadius: 10,
    elevation: 2,
  },
  questionHeader: { // ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§î‡§∞ ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§¨‡§ü‡§® ‡§ï‡•á ‡§≤‡§ø‡§è
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  questionNumberText: {
    fontSize: 14,
    color: '#6c757d',
    // marginBottom: 8, // questionHeader ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡§æ ‡§ó‡§Ø‡§æ
  },
  bookmarkButton: {
    padding: 5,
  },
  bookmarkIcon: {
    fontSize: 22, // ‡§Ü‡§á‡§ï‡•â‡§® ‡§ï‡§æ ‡§∏‡§æ‡§á‡§ú‡§º
    color: '#6c757d', // ‡§¨‡•Å‡§ï‡§Æ‡§æ‡§∞‡•ç‡§ï ‡§Ü‡§á‡§ï‡•â‡§® ‡§ï‡§æ ‡§∞‡§Ç‡§ó
  },
  questionText: {
    fontSize: 17,
    fontWeight: '500',
    color: '#212529',
    lineHeight: 25,
    marginBottom: 8,
  },
  examNameText: {
    fontSize: 13,
    fontStyle: 'italic',
    color: '#4a5568',
    marginTop: 5,
    textAlign: 'right',
  },
  optionsContainer: {
    marginBottom: 15,
  },
  optionButton: {
    backgroundColor: '#ffffff',
    paddingVertical: 14,
    paddingHorizontal: 15,
    marginVertical: 6,
    borderRadius: 8,
    borderWidth: 1.5,
    borderColor: '#ced4da',
  },
  optionText: {
    fontSize: 15,
    color: '#212529',
  },
  selectedOptionButton: {
    backgroundColor: '#cfe2ff',
    borderColor: '#0d6efd',
  },
  correctOptionButton: {
    backgroundColor: '#d1e7dd',
    borderColor: '#198754',
  },
  correctOptionText: {
      color: '#0f5132',
  },
  incorrectOptionButton: {
    backgroundColor: '#f8d7da',
    borderColor: '#dc3545',
  },
  incorrectOptionText: {
      color: '#842029',
  },
  disabledOptionButton: {
      backgroundColor: '#f8f9fa',
      borderColor: '#e9ecef',
  },
  actionButton: {
    backgroundColor: '#0d6efd',
    paddingVertical: 14,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: 'center',
    elevation: 2,
    marginTop: 10,
  },
  nextButtonOnly: {
      width: '100%',
  },
  disabledNextButton: { // ‡§Ø‡§¶‡§ø ‡§Ö‡§ó‡§≤‡§æ ‡§¨‡§ü‡§® ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã
    backgroundColor: '#a0cfff', // ‡§π‡§≤‡•ç‡§ï‡§æ ‡§®‡•Ä‡§≤‡§æ
  },
  actionButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default QuizScreen;