// src/services/NotificationService.ts
import notifee, {
  AuthorizationStatus,
  TimestampTrigger,
  TriggerType,
  RepeatFrequency,
  AndroidImportance,
  Channel,
} from '@notifee/react-native';

const CHANNEL_ID = 'railway_gk_app_channel'; // рдПрдХ рдпреВрдирд┐рдХ рдЪреИрдирд▓ ID

/**
 * Android рдХреЗ рд▓рд┐рдП рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдЪреИрдирд▓ рдмрдирд╛рддрд╛ рд╣реИ (рдпрд╛ рдореМрдЬреВрджрд╛ рдЪреИрдирд▓ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрддрд╛ рд╣реИ)
 */
async function createNotificationChannel(): Promise<string> {
  const existingChannel = await notifee.getChannel(CHANNEL_ID);
  if (existingChannel) {
    console.log(`Channel ${CHANNEL_ID} already exists.`);
    return CHANNEL_ID;
  }

  const channel: Channel = {
    id: CHANNEL_ID,
    name: 'Railway GK App Notifications',
    sound: 'default',
    importance: AndroidImportance.HIGH, // рдорд╣рддреНрд╡рдкреВрд░реНрдг рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рдиреНрд╕ рдХреЗ рд▓рд┐рдП
    lights: true, // рд▓рд╛рдЗрдЯ рдмреНрд▓рд┐рдВрдХ рд╣реЛрдЧреА
    vibration: true, // рд╡рд╛рдЗрдмреНрд░реЗрд╢рди рд╣реЛрдЧрд╛
  };
  await notifee.createChannel(channel);
  console.log(`Channel ${CHANNEL_ID} created.`);
  return CHANNEL_ID;
}

/**
 * рдпреВрдЬрд░ рд╕реЗ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рдХреА рдЕрдиреБрдорддрд┐ рдорд╛рдВрдЧрддрд╛ рд╣реИ
 */
export async function requestUserPermission(): Promise<boolean> {
  const settings = await notifee.requestPermission();

  if (settings.authorizationStatus >= AuthorizationStatus.AUTHORIZED) {
    console.log('Notification permission granted.');
    // iOS рдХреЗ рд▓рд┐рдП foreground presentation options рд╕реЗрдЯ рдХрд░реЗрдВ (рдЕрдЧрд░ рдРрдк рдЦреБрд▓реА рд╣реЛ рддрдм рднреА рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рджрд┐рдЦреЗ)
    await notifee.setForegroundPresentationOptions({
      alert: true,
      badge: true,
      sound: true,
    });
    return true;
  } else {
    console.log('Notification permission denied.');
    return false;
  }
}

/**
 * рджрд┐рди рдореЗрдВ 10 рдмрд╛рд░ рджреЛрд╣рд░рд╛рдИ рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рдиреНрд╕ рд╢реЗрдбреНрдпреВрд▓ рдХрд░рддрд╛ рд╣реИ
 */
export async function scheduleDailyRepeatingNotifications() {
  try {
    // рдкрд╣рд▓реЗ рд╕реЗ рд╢реЗрдбреНрдпреВрд▓ рдХреА рдЧрдИ рдЗрд╕ рдРрдк рдХреА рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рдиреНрд╕ рдХреЛ рдХреИрдВрд╕рд▓ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдбреБрдкреНрд▓реАрдХреЗрдЯ рди рд╣реЛрдВ
    // рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдЗрд╕реЗ рдФрд░ рдмреЗрд╣рддрд░ рдмрдирд╛ рд╕рдХрддреЗ рд╣реИрдВ, рд╕рд┐рд░реНрдл рдЙрдиреНрд╣реАрдВ рдХреЛ рдХреИрдВрд╕рд▓ рдХрд░реЗрдВ рдЬреЛ рдЖрдк рджреЛрдмрд╛рд░рд╛ рд╢реЗрдбреНрдпреВрд▓ рдХрд░ рд░рд╣реЗ рд╣реИрдВ
    const scheduledNotificationIds = await notifee.getTriggerNotificationIds();
    if (scheduledNotificationIds.length > 0) {
        console.log('Cancelling previously scheduled notifications:', scheduledNotificationIds);
        await notifee.cancelAllNotifications(scheduledNotificationIds); // рд╕рднреА рдЯреНрд░рд┐рдЧрд░ рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рдиреНрд╕ рдХреИрдВрд╕рд▓ рдХрд░реЗрдВ
        // рдпрд╛ await notifee.cancelTriggerNotifications(ids_array);
    }


    const channelId = await createNotificationChannel(); // рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЪреИрдирд▓ рдореМрдЬреВрдж рд╣реИ

    const notificationTimes = [
      { hour: 7, minute: 0, id: 'GK_0700', title: 'ЁЯМЕ рд╕реБрдкреНрд░рднрд╛рдд!', body: 'рдЖрдЬ рдХрд╛ рдкрд╣рд▓рд╛ рдЬреНрдЮрд╛рди рдореЛрддреА рдЖрдкрдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░ рд░рд╣рд╛ рд╣реИред рдРрдк рдЦреЛрд▓реЗрдВ рдФрд░ рд╕реАрдЦреЗрдВ!' },
      { hour: 8, minute: 30, id: 'GK_0830', title: 'ЁЯЪА рджрд┐рди рдХреА рд╢рд╛рдирджрд╛рд░ рд╢реБрд░реБрдЖрдд!', body: 'рдХреНрдпрд╛ рдЖрдкрдиреЗ рдЖрдЬ рдХреЗ рдХрд░рдВрдЯ рдЕрдлреЗрдпрд░реНрд╕ рдкрдврд╝реЗ? рдЕрднреА рдЪреЗрдХ рдХрд░реЗрдВ!' },
      { hour: 10, minute: 0, id: 'GK_1000', title: 'ЁЯТб рджрд┐рдорд╛рдЧ рдХреЛ рдЪрд╛рд░реНрдЬ рдХрд░реЗрдВ!', body: 'рдПрдХ рдЫреЛрдЯрд╛ рд╕рд╛ рдХреНрд╡рд┐рдЬрд╝ рдЦреЗрд▓рдХрд░ рдЕрдкрдиреА рдпрд╛рджрджрд╛рд╢реНрдд рдкрд░рдЦреЗрдВред рдЖрдк рддреИрдпрд╛рд░ рд╣реИрдВ?' },
      { hour: 11, minute: 30, id: 'GK_1130', title: 'ЁЯзР рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ?', body: 'рд░реЗрд▓рд╡реЗ рдкрд░реАрдХреНрд╖рд╛ рд╕реЗ рдЬреБрдбрд╝рд╛ рдПрдХ рд░реЛрдЪрдХ рддрдереНрдп рд╕рд┐рд░реНрдл рдЖрдкрдХреЗ рд▓рд┐рдП!' },
      { hour: 13, minute: 0, id: 'GK_1300', title: 'ЁЯН╜я╕П рд▓рдВрдЪ рдмреНрд░реЗрдХ рдореЗрдВ рдереЛрдбрд╝рд╛ рдЬреНрдЮрд╛рди!', body: '5 рдорд┐рдирдЯ рдореЗрдВ рдХреБрдЫ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╡рди-рд▓рд╛рдЗрдирд░реНрд╕ рд░рд┐рд╡рд╛рдЗрдЬ рдХрд░реЗрдВред' },
      { hour: 16, minute: 25, id: 'GK_1500', title: 'ЁЯФФ рдЪреБрдиреМрддреА рдХрд╛ рд╕рдордп!', body: 'рдЖрдЬ рдХреЗ рд╕рдмрд╕реЗ рдХрдард┐рди рдкреНрд░рд╢реНрди рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реЛ рдЬрд╛рдПрдВред' },
      { hour: 17, minute: 0, id: 'GK_1700', title: 'ЁЯУИ рдЕрдкрдиреА рдкреНрд░рдЧрддрд┐ рджреЗрдЦреЗрдВ!', body: 'рдХреНрдпрд╛ рдЖрдк рдЖрдЬ рдХреЗ рд▓рд░реНрдирд┐рдВрдЧ рдЯрд╛рд░рдЧреЗрдЯ рдХреЗ рдХрд░реАрдм рд╣реИрдВ? рдПрдХ рдирдЬрд╝рд░ рдбрд╛рд▓реЗрдВред' },
      { hour: 19, minute: 0, id: 'GK_1900', title: 'ЁЯМЩ рд╢рд╛рдо рдХрд╛ рдЕрдзреНрдпрдпрди рд╕рддреНрд░!', body: 'рджрд┐рдирднрд░ рдХреА рдердХрд╛рди рдХреЗ рдмрд╛рдж рднреА, рдереЛрдбрд╝рд╛ рдФрд░ рдЬреНрдЮрд╛рди ржЕрж░рзНржЬржи рдХрд░реЗрдВред' },
      { hour: 20, minute: 30, id: 'GK_2030', title: 'ЁЯОп рд▓рдХреНрд╖реНрдп рднреЗрджрди!', body: 'рд╕реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЖрдЬ рдХреЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЯреЙрдкрд┐рдХреНрд╕ рдХрд╛ рдХреНрд╡рд┐рдХ рд░рд┐рд╡реАрдЬрди рдХрд░реЗрдВред' },
      { hour: 22, minute: 0, id: 'GK_2200', title: 'тЬи рд╢рд╛рдирджрд╛рд░ рдкреНрд░рдпрд╛рд╕!', body: 'рдЖрдЬ рдЖрдкрдиреЗ рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рдХрд┐рдпрд╛ред рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдХрд▓ рдХреА рдирдИ рдЪреБрдиреМрддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд░рд╣реЗрдВред рд╢реБрдн рд░рд╛рддреНрд░рд┐!' },
    ];

    for (const notification of notificationTimes) {
      const triggerDate = new Date();
      triggerDate.setHours(notification.hour, notification.minute, 0, 0);

      // рдЕрдЧрд░ рдЖрдЬ рдХрд╛ рд╕рдордп рдирд┐рдХрд▓ рдЧрдпрд╛ рд╣реИ, рддреЛ рдХрд▓ рдХреЗ рд▓рд┐рдП рд╢реЗрдбреНрдпреВрд▓ рдХрд░реЗрдВ
      if (triggerDate.getTime() < Date.now()) {
        triggerDate.setDate(triggerDate.getDate() + 1);
      }

      const trigger: TimestampTrigger = {
        type: TriggerType.TIMESTAMP,
        timestamp: triggerDate.getTime(),
        repeatFrequency: RepeatFrequency.DAILY,
      };

      await notifee.createTriggerNotification(
        {
          id: notification.id,
          title: notification.title,
          body: notification.body,
          android: {
            channelId: channelId,
            pressAction: {
              id: 'default', // рдРрдк рдХреЛ рд▓реЙрдиреНрдЪ рдХрд░реЗрдЧрд╛
            },
            smallIcon: 'ic_launcher', // рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдпрд╣ рдЖрдЗрдХреЙрди рдЖрдкрдХреЗ drawable рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП
            // largeIcon: 'ic_large_icon', // Optional: рдмреЬрд╛ рдЖрдЗрдХреЙрди
            importance: AndroidImportance.HIGH,
            // style: { type: AndroidStyle.BIGTEXT, text: notification.body }, // рд▓рдВрдмрд╛ рдЯреЗрдХреНрд╕реНрдЯ рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП
          },
          ios: {
            sound: 'default',
            // foregroundPresentationOptions: // рдпрд╣ requestUserPermission рдореЗрдВ рд╕реЗрдЯ рдХрд┐рдпрд╛ рдЬрд╛ рдЪреБрдХрд╛ рд╣реИ
          }
        },
        trigger,
      );
      console.log(`Notification ID "${notification.id}" scheduled for ${triggerDate.toLocaleString()}`);
    }
    console.log('All 10 daily notifications scheduled successfully.');

  } catch (error) {
    console.error('Error scheduling notifications:', error);
  }
}

/**
 * рдиреЛрдЯрд┐рдлрд┐рдХреЗрд╢рди рд╕рд┐рд╕реНрдЯрдо рдХреЛ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░рддрд╛ рд╣реИ
 */
export async function initializeNotifications() {
  const permissionGranted = await requestUserPermission();
  if (permissionGranted) {
    await scheduleDailyRepeatingNotifications();
  } else {
    console.log('Notifications cannot be scheduled as permission was denied.');
    // рдЖрдк рдЪрд╛рд╣реЗрдВ рддреЛ рдпреВрдЬрд░ рдХреЛ рджреЛрдмрд╛рд░рд╛ рдкрд░рдорд┐рд╢рди рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реЗрд░рд┐рдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
  }
}